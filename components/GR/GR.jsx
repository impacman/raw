import { useRef } from 'react';
import { SmoothScrollProviderWithouDestroy } from '@/context/scroll';
import {
  GetRawCom,
  Btn,
  MainTitle,
  Info,
  InfoItem,
  InfoItemId,
  InfoItemTitle,
  InfoItemDescr,
  MainImg,
  Line,
  Descr,
  More,
  Screen,
  Reviews,
  Title,
  ReviewsImg,
  ReviewsItems,
  ReviewsItem,
  ReviewsItemTitle,
  ReviewsItemDescr,
  ReviewsItemDate,
  ReviewsStars,
  Link,
} from './styled';

import Picture from '../Picture';

const Stars = ({ rew }) => (
  <svg width="129" height="28" viewBox="0 0 129 28" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path
      d="M12.2629 3.5169C12.5623 2.59559 13.8657 2.59558 14.1651 3.51689L15.9562 9.02951C16.0901 9.44153 16.474 9.72049 16.9073 9.72049H22.7036C23.6723 9.72049 24.0751 10.9601 23.2914 11.5295L18.602 14.9365C18.2516 15.1911 18.1049 15.6425 18.2388 16.0545L20.0299 21.5671C20.3293 22.4884 19.2748 23.2546 18.4911 22.6852L13.8018 19.2782C13.4513 19.0235 12.9767 19.0235 12.6262 19.2782L7.9369 22.6852C7.15319 23.2546 6.09871 22.4884 6.39806 21.5671L8.18922 16.0545C8.32309 15.6425 8.17643 15.1911 7.82595 14.9365L3.13664 11.5295C2.35293 10.9601 2.7557 9.72049 3.72442 9.72049H9.52073C9.95395 9.72049 10.3379 9.44153 10.4718 9.02951L12.2629 3.5169Z"
      fill={rew ? '#EE8835' : '#8E8E92'}
    />
    <path
      d="M37.9055 3.5169C38.2049 2.59559 39.5083 2.59558 39.8076 3.51689L41.5988 9.02951C41.7327 9.44153 42.1166 9.72049 42.5498 9.72049H48.3461C49.3149 9.72049 49.7177 10.9601 48.9339 11.5295L44.2446 14.9365C43.8941 15.1911 43.7475 15.6425 43.8814 16.0545L45.6725 21.5671C45.9719 22.4884 44.9174 23.2546 44.1337 22.6852L39.4444 19.2782C39.0939 19.0235 38.6193 19.0235 38.2688 19.2782L33.5795 22.6852C32.7958 23.2546 31.7413 22.4884 32.0406 21.5671L33.8318 16.0545C33.9657 15.6425 33.819 15.1911 33.4685 14.9365L28.7792 11.5295C27.9955 10.9601 28.3983 9.72049 29.367 9.72049H35.1633C35.5965 9.72049 35.9805 9.44153 36.1144 9.02951L37.9055 3.5169Z"
      fill={rew ? '#EE8835' : '#8E8E92'}
    />
    <path
      d="M63.5491 3.5169C63.8484 2.59559 65.1518 2.59558 65.4512 3.51689L67.2423 9.02951C67.3762 9.44153 67.7602 9.72049 68.1934 9.72049H73.9897C74.9584 9.72049 75.3612 10.9601 74.5775 11.5295L69.8882 14.9365C69.5377 15.1911 69.391 15.6425 69.5249 16.0545L71.3161 21.5671C71.6154 22.4884 70.5609 23.2546 69.7772 22.6852L65.0879 19.2782C64.7374 19.0235 64.2628 19.0235 63.9123 19.2782L59.223 22.6852C58.4393 23.2546 57.3848 22.4884 57.6842 21.5671L59.4754 16.0545C59.6092 15.6425 59.4626 15.1911 59.1121 14.9365L54.4228 11.5295C53.6391 10.9601 54.0418 9.72049 55.0106 9.72049H60.8069C61.2401 9.72049 61.624 9.44153 61.7579 9.02951L63.5491 3.5169Z"
      fill={rew ? '#EE8835' : '#8E8E92'}
    />
    <path
      d="M89.1912 3.5169C89.4905 2.59559 90.7939 2.59558 91.0933 3.51689L92.8844 9.02951C93.0183 9.44153 93.4023 9.72049 93.8355 9.72049H99.6318C100.601 9.72049 101.003 10.9601 100.22 11.5295L95.5303 14.9365C95.1798 15.1911 95.0331 15.6425 95.167 16.0545L96.9582 21.5671C97.2575 22.4884 96.203 23.2546 95.4193 22.6852L90.73 19.2782C90.3795 19.0235 89.9049 19.0235 89.5544 19.2782L84.8651 22.6852C84.0814 23.2546 83.0269 22.4884 83.3263 21.5671L85.1174 16.0545C85.2513 15.6425 85.1047 15.1911 84.7542 14.9365L80.0649 11.5295C79.2811 10.9601 79.6839 9.72049 80.6526 9.72049H86.449C86.8822 9.72049 87.2661 9.44153 87.4 9.02951L89.1912 3.5169Z"
      fill={rew ? '#EE8835' : '#8E8E92'}
    />
    {rew ? (
      <path
        d="M116.364 3.63818L118.155 9.15079C118.342 9.72453 118.876 10.113 119.48 10.113H125.276C125.864 10.113 126.109 10.8661 125.633 11.212L120.944 14.619C120.456 14.9735 120.251 15.6021 120.438 16.1758L122.229 21.6884C122.411 22.2481 121.77 22.7136 121.294 22.3676L116.605 18.9607C116.117 18.6061 115.456 18.6061 114.968 18.9607L110.278 22.3676C109.802 22.7136 109.162 22.2481 109.344 21.6884L111.135 16.1758C111.321 15.6021 111.117 14.9735 110.629 14.619L105.94 11.212C105.463 10.8661 105.708 10.113 106.297 10.113H112.093C112.696 10.113 113.231 9.72454 113.417 9.1508L115.208 3.63818C115.39 3.07848 116.182 3.07848 116.364 3.63818Z"
        stroke="#EE8835"
        strokeWidth="0.78499"
        fill="#EE8835"
      />
    ) : (
      <>
        <path
          d="M116.364 3.63818L118.155 9.15079C118.342 9.72453 118.876 10.113 119.48 10.113H125.276C125.864 10.113 126.109 10.8661 125.633 11.212L120.944 14.619C120.456 14.9735 120.251 15.6021 120.438 16.1758L122.229 21.6884C122.411 22.2481 121.77 22.7136 121.294 22.3676L116.605 18.9607C116.117 18.6061 115.456 18.6061 114.968 18.9607L110.278 22.3676C109.802 22.7136 109.162 22.2481 109.344 21.6884L111.135 16.1758C111.321 15.6021 111.117 14.9735 110.629 14.619L105.94 11.212C105.463 10.8661 105.708 10.113 106.297 10.113H112.093C112.696 10.113 113.231 9.72454 113.417 9.1508L115.208 3.63818C115.39 3.07848 116.182 3.07848 116.364 3.63818Z"
          stroke="#8E8E92"
          strokeWidth="0.78499"
        />
        <path
          d="M110.762 16.0547L108.971 21.5674C108.671 22.4887 109.726 23.2548 110.509 22.6854L112.408 21.3063C112.667 21.1181 112.82 20.8174 112.82 20.4973V10.7207C112.82 10.1684 112.372 9.7207 111.82 9.7207H106.297C105.328 9.7207 104.925 10.9603 105.709 11.5297L110.398 14.9367C110.749 15.1913 110.896 15.6427 110.762 16.0547Z"
          fill="#8E8E92"
        />
      </>
    )}
  </svg>
);

const Armchair = () => (
  <svg xmlns="http://www.w3.org/2000/svg" width="45" height="47" viewBox="0 0 45 47" fill="none">
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M0.0777264 4.04759L5.65389 27.4675C6.10781 29.374 7.94579 30.6155 9.88387 30.3248L41.4748 25.5861C42.9857 25.3595 44.0438 23.9745 43.8653 22.4571L43.4703 19.099C43.3457 18.0399 42.3685 17.2945 41.3141 17.4543L13.8737 21.6119C12.8865 21.7615 11.9538 21.1159 11.746 20.1393L7.77892 1.49415C7.56744 0.50021 6.60666 -0.14761 5.60593 0.0289888L2.3387 0.605559C0.735006 0.888564 -0.299461 2.4634 0.0777264 4.04759ZM13.5306 14.804L12.5873 10.5595L32.9559 7.52589C33.9592 7.37647 34.9011 8.04715 35.088 9.04411L36.168 14.804L31.9235 15.2756L31.4518 11.9744L13.5306 14.804ZM36.168 29.424L40.8809 45.2763C41.1626 46.2239 42.0336 46.8737 43.0222 46.8737C44.316 46.8737 45.2517 45.6376 44.9005 44.3924L40.4126 28.4808L36.168 29.424ZM4.57018 31.7821L1.28881 44.4974C1.01795 45.547 1.65402 46.6163 2.70561 46.8792C3.74007 47.1378 4.79066 46.5186 5.0654 45.4883L8.34308 33.1969C7.55706 33.3541 5.70205 33.2913 4.57018 31.7821Z"
      fill="#8E8E92"
    />
  </svg>
);

const GR = ({ data, snap, pint, link }) => {
  const refContainer = useRef(null);
  const { title, img, info, descr, descr2, reviews } = data;

  return (
    <>
      <Btn href="#">GET RAW NOW</Btn>
      <SmoothScrollProviderWithouDestroy refContainer={refContainer}>
        <GetRawCom data-scroll-container ref={refContainer} data-triger="getraw">
          <Link href="#" data-touch></Link>
          {title && <MainTitle>{title}</MainTitle>}
          {img && (
            <MainImg href={link ? link : '#'}>
              <Picture path={img.path} src={img.src} alt={img.alt} />
            </MainImg>
          )}
          <Line />
          {info && (
            <Info>
              {info.map(({ id, title, descr }) => (
                <InfoItem key={id}>
                  <InfoItemId>{id}</InfoItemId>
                  {title === 'armchair' ? <Armchair /> : <InfoItemTitle>{title}</InfoItemTitle>}
                  {descr === 'stars' ? <Stars /> : <InfoItemDescr>{descr}</InfoItemDescr>}
                </InfoItem>
              ))}
            </Info>
          )}
          <Line />
          {descr && <Descr dangerouslySetInnerHTML={{ __html: descr.text }} />}
          <Line />
          <Screen>
            <Picture path={'gr'} src={'screen'} alt={'Screen'} />
          </Screen>
          <Line />
          {descr2 && (
            <>
              <Descr dangerouslySetInnerHTML={{ __html: descr2.text }} />
              {descr2.more && <More>more</More>}
            </>
          )}
          <Line />
          {reviews && (
            <Reviews>
              <Title>{reviews.title}</Title>
              <ReviewsImg>
                <Picture path={reviews.img.path} src={reviews.img.src} alt={reviews.img.alt} />
              </ReviewsImg>
            </Reviews>
          )}
          <Line />
          {reviews && (
            <ReviewsItems>
              {reviews.items.map(({ id, title, descr, date }) => (
                <ReviewsItem key={id}>
                  <ReviewsItemTitle>{title}</ReviewsItemTitle>
                  <ReviewsStars>
                    <Stars rew />
                  </ReviewsStars>
                  <ReviewsItemDescr>{descr}</ReviewsItemDescr>
                  <ReviewsItemDate dangerouslySetInnerHTML={{ __html: date }} />
                </ReviewsItem>
              ))}
            </ReviewsItems>
          )}
        </GetRawCom>
      </SmoothScrollProviderWithouDestroy>
    </>
  );
};

export default GR;
